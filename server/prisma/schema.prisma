datasource db {
  provider = "postgresql"
  url      = env("API_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Task {
  id    Int     @id @default(autoincrement())
  label String
  done  Boolean @default(false)
}

model Post {
  id String @id @default(cuid())
  title String
  slug String
  content Content? @relation(fields: [contentId], references: [id])
  contentId String?
  category Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
  item Item? @relation(fields: [itemId], references: [id])
  itemId String?
  elements Json
  created DateTime @default(now())
  updated DateTime @default(now())
  publish Boolean @default(false)
  from DateTime
  to DateTime?
  metaTitle String?
  metaDescription String?
  metaOgType String?
  metaOgImage BlancFile? @relation(fields: [metaOgImageId], references: [id])
  metaOgImageId String?
  metaTwitterCardType String?
}

model Category {
  id String @id @default(cuid())
  name String
  created DateTime @default(now())
  updated DateTime @default(now())
  content Content? @relation(fields: [contentId], references: [id])
  contentId String?
  posts Post[]
}

model Content {
  id String @id @default(cuid())
  name String
  slug String @unique
  created DateTime @default(now())
  updated DateTime @default(now())
  posts Post[]
  categories Category[]
  items Item[]
  itemParams ItemParam[]
  isAutoPostCreateWithItem Boolean @default(false)
}

model Item {
  id String @id @default(cuid())
  name String
  created DateTime @default(now())
  updated DateTime @default(now())
  public Boolean @default(false)
  from DateTime @default(now())
  to DateTime?
  content Content? @relation(fields: [contentId], references: [id])
  contentId String?
  thumbnail BlancFile? @relation(fields: [thumbnailId], references: [id])
  thumbnailId String?
  post Post?
  data Json @default("{}")
}

model ItemParam {
  id String @id @default(cuid())
  paramId String @default(cuid()) @unique
  name String
  type String
  isRequired Boolean @default(false)
  content Content? @relation(fields: [contentId], references: [id])
  contentId String?
  created DateTime @default(now())
  updated DateTime @default(now())
}

model BlancFile {
  id String @id @default(cuid())
  name String
  url String?
  size Int
  width Int
  height Int
  created DateTime @default(now())
  updated DateTime @default(now())
  deleted DateTime?
  dataURL String?
  item Item[]
  post Post?
  user BlancUser?
}

model BlancUser {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  image BlancFile? @relation(fields: [imageId], references: [id])
  imageId String?
  blancId       String    @unique @default(cuid())
  isFirstLogin Boolean @default(true)
  isOwner Boolean @default(false)
  isOnline Boolean @default(false)
  lastLogin DateTime @default(now())
  created DateTime @default(now())
  updated DateTime @default(now())
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}